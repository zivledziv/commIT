# name: deploy all

# on:
#   push:
#     branches:
#       - main

# env:
#   AWS_REGION: us-east-1
#   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   ECS_CLUSTER_NAME: commIT-cluster
#   ECS_SERVICE_NAME: commit-frontend
#   DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#   DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2

#       - name: Login to Dockerhub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Get build number
#         id: get_build_number
#         run: echo "::set-output name=BUILD_NUMBER::${GITHUB_RUN_NUMBER}"

#       - name: Build and push Docker image for frontend service
#         run: |
#           docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/commit-frontend:v1.${{ steps.get_build_number.outputs.BUILD_NUMBER }} \
#                           -t ${{ secrets.DOCKERHUB_USERNAME }}/commit-frontend:latest \
#                           ./frontend

#           docker push ${{ secrets.DOCKERHUB_USERNAME }}/commit-frontend:v1.${{ steps.get_build_number.outputs.BUILD_NUMBER }}
#           docker push ${{ secrets.DOCKERHUB_USERNAME }}/commit-frontend:latest

#       # - name: Build and push Docker image for backend service
#       #   run: |
#       #       docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/backend-frontend:v1.${{ steps.get_build_number.outputs.BUILD_NUMBER }} \
#       #                       -t ${{ secrets.DOCKERHUB_USERNAME }}/backend-frontend:latest \
#       #                       ./backend

#       #       docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend-frontend:v1.${{ steps.get_build_number.outputs.BUILD_NUMBER }}
#       #       docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend-frontend:latest

#       - name: Check if S3 bucket for terraform backend already exists
#         id: check-s3
#         run: |
#           bucket_name="commit-state-bucket-ziv"
#           if aws s3 ls "s3://$bucket_name" 2>&1 | grep -q 'NoSuchBucket'; then
#             echo "Bucket does not exist."
#             echo "::set-output name=exists::false"
#           else
#             echo "Bucket already exists."
#             echo "::set-output name=exists::true"
#           fi

#       - name: Create S3 bucket if not exists
#         if: steps.check-s3.outputs.exists == 'false'
#         run: |
#           bucket_name="commit-state-bucket-ziv"
#           aws s3api create-bucket --bucket $bucket_name --region $AWS_REGION --create-bucket-configuration LocationConstraint=$AWS_REGION

#       - name: Terraform Init
#         id: init
#         run: terraform fmt && terraform init -upgrade
#         working-directory: terraform

#       - name: Terraform apply
#         run: terraform apply -auto-approve
#         working-directory: terraform

#       - name: Update ECS service
#         run: aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment
#         working-directory: terraform
